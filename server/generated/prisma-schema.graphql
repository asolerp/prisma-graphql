type AggregateCoin {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Coin {
  id: ID!
  base: String!
  target: String!
  price: String!
}

type CoinConnection {
  pageInfo: PageInfo!
  edges: [CoinEdge]!
  aggregate: AggregateCoin!
}

input CoinCreateInput {
  id: ID
  base: String!
  target: String!
  price: String!
}

type CoinEdge {
  node: Coin!
  cursor: String!
}

enum CoinOrderByInput {
  id_ASC
  id_DESC
  base_ASC
  base_DESC
  target_ASC
  target_DESC
  price_ASC
  price_DESC
}

type CoinPreviousValues {
  id: ID!
  base: String!
  target: String!
  price: String!
}

type CoinSubscriptionPayload {
  mutation: MutationType!
  node: Coin
  updatedFields: [String!]
  previousValues: CoinPreviousValues
}

input CoinSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoinWhereInput
  AND: [CoinSubscriptionWhereInput!]
}

input CoinUpdateInput {
  base: String
  target: String
  price: String
}

input CoinUpdateManyMutationInput {
  base: String
  target: String
  price: String
}

input CoinWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  base: String
  base_not: String
  base_in: [String!]
  base_not_in: [String!]
  base_lt: String
  base_lte: String
  base_gt: String
  base_gte: String
  base_contains: String
  base_not_contains: String
  base_starts_with: String
  base_not_starts_with: String
  base_ends_with: String
  base_not_ends_with: String
  target: String
  target_not: String
  target_in: [String!]
  target_not_in: [String!]
  target_lt: String
  target_lte: String
  target_gt: String
  target_gte: String
  target_contains: String
  target_not_contains: String
  target_starts_with: String
  target_not_starts_with: String
  target_ends_with: String
  target_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  AND: [CoinWhereInput!]
}

input CoinWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCoin(data: CoinCreateInput!): Coin!
  updateCoin(data: CoinUpdateInput!, where: CoinWhereUniqueInput!): Coin
  updateManyCoins(data: CoinUpdateManyMutationInput!, where: CoinWhereInput): BatchPayload!
  upsertCoin(where: CoinWhereUniqueInput!, create: CoinCreateInput!, update: CoinUpdateInput!): Coin!
  deleteCoin(where: CoinWhereUniqueInput!): Coin
  deleteManyCoins(where: CoinWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  coin(where: CoinWhereUniqueInput!): Coin
  coins(where: CoinWhereInput, orderBy: CoinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coin]!
  coinsConnection(where: CoinWhereInput, orderBy: CoinOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoinConnection!
  node(id: ID!): Node
}

type Subscription {
  coin(where: CoinSubscriptionWhereInput): CoinSubscriptionPayload
}
